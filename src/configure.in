#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
# 
# Description: configure.in
#   Autonconf produce a ./configure from this file
#   that's used to discover various programs/dependencies
#   usage: autoconf
#
# Authors: paul_c alex_joni jepler
# License: GPL Version 2
# System: Linux
#    
# Copyright (c) 2004 All rights reserved.
#
# Last change:
# This file is released under GPL, refer to docs/README for details
#
# This file is adapted to replace the old ./configure script
# therefor it includes parts of that script

##############################################################################
# Section 1                                                                  #
# Autoconf initialisation                                                    #
##############################################################################

AC_PREREQ(2.53)
AC_INIT([LinuxCNC],[m4_normalize(esyscmd(cat ../VERSION))],[emc-developers@lists.sourceforge.net])
AC_CONFIG_SRCDIR(emc/motion/motion.c)
if test "$srcdir" != "."; then
    AC_MSG_ERROR([Building outside of srcdir is not supported])
fi

AC_MSG_CHECKING(build toplevel)
BUILD_TOPLEVEL="$(cd ..; pwd -P)"
AC_MSG_RESULT($BUILD_TOPLEVEL)

AC_CONFIG_HEADER(config.h)

# Support some of the standard configure options for directories
AC_PREFIX_DEFAULT(run-in-place)

AC_MSG_CHECKING(installation prefix)
if test "x$prefix" = "xNONE"; then
  RUN_IN_PLACE=yes
  AC_MSG_RESULT(run in place)
  prefix=${BUILD_TOPLEVEL}
else
  RUN_IN_PLACE=no
  AC_MSG_RESULT($prefix)
fi
AC_SUBST(AUTODIRS)

# internationalisation package name:
PACKAGE="linuxcnc"
AC_SUBST([PACKAGE])

if test -f ../VERSION; then
    EMC2VERSION="$(cat ../VERSION)"
else
    EMC2VERSION="Undetermined"
fi
AC_SUBST([EMC2VERSION])

AC_PATH_PROG(GREP, grep)
AC_PATH_PROG(EGREP, egrep)
AC_PATH_PROG(ARCHCMD, arch)

##############################################################################
# Section 2                                                                  #
# RealTime checking (either RTAI, or RT-Linux)                               #
# Subsection 2.1 - arguments to ./configure (--with-realtime)                #
# Subsection 2.2 - if none specified above, RTDIR needs to be found by search#
# Subsection 2.3 - RTS(RT-script) is found, it gets queried for values       #
##############################################################################

# set up some default values

# we'll be using it for compile tests
# might be extended by RTSCC later
AC_PROG_CC([gcc])  

# RTDIR points to some directory which is supposed to reveal which RT thread
# system is in use, like /usr/realtime* or /usr/src/rtai* .
# used in Makefile and Makefile.modinc to set a threadsystem specific include path,
# it is assumed to have subdirs:
# modules
# include
RTDIR=""
#  it can be explicitly set with the --with-rtdir=<directory> option
WITH_RTDIR=""

# shorthand for the threadsystem. currently rtai, rtai-3.0 or none. not set for rtl or sim.
RTNAME=""

# RTAI version define. 1 with RTNAME=rtai, 3 with rtai-3.0
RTAI=""

# a compiler which might be specific for the realime system.
# relevant case: rtai-config -cc
RTSCC=""

# used  to signify the thread style
# also in src/rtapi/ as part of the filename for the threadsystem-specific RTAPI files (src/Makefile)
# historic values: 'sim', 'rtai', or 'rtl'.
#
# used in:
# src/Makefile.inc
# src/Makefile 
# src/module_helper/Submakefile
# scripts/realtime
# scripts/rtapi.conf
RTPREFIX=""

# historic values 'sim', or 'simulator', or a script like /usr/realtime/foo-config,
# which can be used to extract c or ld flags specific for the thread system.
#RTS

# checked only if RTS equals */rtai-config or */realtime-config. empty for sim.
KERNELDIR=""

# the c flags for compiling kernel modules. set by calling RTS. rtai* and rtlinux only.
RTFLAGS=""

# this used to be: 'sim', 'kbuild' or 'normal' 
# 'normal' was used by rtlinux, and is deprecated.
# 'sim' has been renamed 'user-dso' because it does not imply simulator mode anymore -
#   too much confusion.
BUILD_SYS=""
# reflected in config.h like so:
#
# /* build modules through kbuild */
# /* #undef BUILD_SYS_KBUILD */
#
# /* build normal (unused) */
# /* #undef BUILD_SYS_NORMAL */
#
# /* build modules as .so shared objects */
# #define BUILD_SYS_USER_DSO /**/


# SIMULATOR=yes if --enable-simulator was given - use this to derive other values
# used in tcl :-/
# tcl/show_errors.tcl
# tcl/linuxcnc.tcl.in
SIMULATOR=no

#----------------------------------------------------------------------------
#
# introduce new build categories as per:
# http://wiki.linuxcnc.org/cgi-bin/wiki.pl?RealtimeConfiguratonProposal
#
# at the shell script/makefile level, we have:
#
# 'THREADS' - one of 'rtai', 'posix', 'xenomai-user', 'xenomai-kernel',
# 'rt-preempt-user', 'rt-preempt-kernel' in shell/Makefile
#
THREADS=""

# reflected in config.h like so:
#
# /* thread style posix */
# /* #undef RTAPI_POSIX */
#
# /* thread style rtai */
# /* #undef RTAPI_RTAI */
#
# /* thread style rt-preempt-kernel */
# /* #undef RTAPI_RTPREEMPT_KERNEL */
#
# /* thread style rt-preempt-user */
# /* #undef RTAPI_RTPREEMPT_USER */
#
# /* thread style xenomai-kernel */
# /* #undef RTAPI_XENOMAI_KERNEL */
#
# /* thread style xenomai-user */
# #define RTAPI_XENOMAI_USER /**/
#

# 'BUILD_SYS' - one of 'user-dso', 'kbuild' or 'normal' in shell/Makkefile
#
# this is reflected in config.h like so:
#
# /* build modules through kbuild */
# /* #undef BUILD_SYS_KBUILD */
#
# /* build normal (unused) */
# /* #undef BUILD_SYS_NORMAL */
#
# /* build modules as .so shared objects */
# #define BUILD_SYS_USER_DSO /**/


# the latter is implied by the former, so we have:
# 'rtai', 'xenomai-kernel', 'rt-preempt-kernel' -> implies 'kbuild' 
# 'posix', 'xenomai-user', 'rt-preempt-user' -> implies 'user-dso'
# and the corresponding #defines.
#
# ------------ drivers: build or dont build -------------
#
# A third angle is whether to build drivers or not. Normally drivers would be
# built except for the simulator version. However, there is no reason not to develop 
# user-mode drivers with a simulator, in which case drivers should be built, and the
# 'sudo make setuid' step will be required.
# Wether a given driver should be compiled should be defined in the Submakefile,
# subject to supported BUILD_SYS and possibly THREADS.
#
# To reduce the suprise factor of a simulator config suddenly talking to ports,
# BUILD_DRIVERS defaults to 'no' for the 'simulator' build. 
# to explicitly enable them, we add a '--enable-drivers' option for that case.
#
BUILD_DRIVERS="no"
# reflected in config.h as follows:
# /* build hardware drivers */
# #define BUILD_DRIVERS /**/
#
# the existing configurations will translate as follows:
#
# --enable-simulator: THREADS=posix, BUILD_SYS=user-dso, BUILD_DRIVERS=no
#   defines shell subsitution, and make variables as follows:
#           BUILD_SYS=usr-dso THREADS=posix BUILD_DRIVERS=no
#   define in config.h: BUILD_USER_DSO RTAPI_POSIX
#
# --enable-simulator --enable-drivers will set BUILD_DRIVERS=yes in shell/Makefiles
#   and define in config.h: BUILD_DRIVERS
#
# 
#--with-kernel=/boot/config-<whatever>  which defaults to running kernel 
#--with-build-type=(posix,rtai,rt-preempt-user,rt-preempt-kernel,xenomai-user,xenomai-kernel) 
#--enable-drivers (defaults to yes except for --with-build-type=posix which is newspeak for 'sim')

#the latter can be defaulted too once you have access to /boot/config*, and checked against kernel

#In practice this would look like so:

#configure --enable-simulator 
# 	as before. defaults to --with-build-type=posix, and --disable-drivers but may take a --enable-drivers #option to build drivers like sim_parport
#	doesnt care about kernel; fine if Gnu threads library installed.
#
#configure
#	Takes the running kernel config to determine which kernel type (rtai, xenomai, rt-preempt)
#	makes a default thread style (rtai, rt-preempt-user and xenomai-user for now)
#	complains if running kernel is generic (non-RT)
#	implies --enable-drivers. Module type derived from thread style.
#
#configure --with-build-type=xenomai-user --with-kernel=/boot/config-2.6.38.8-xenomai
#	this would build for xenomai-2.6.38.8-xenomai provided it is installed but needs not be running
#	complains if /boot/config-2.6.38.8-xenomai does not smell like a Xenomai config
#
#configure --with-build-type=rt-preempt-user
#	this would check whether the running kernel is in fact rt-preempt by inspecting /boot/config-`uname #-r` for appropriate flags, and complain otherwise-
KCONFIG=""

# if autoconfiguring from kernel config, use these
# defaults as thread style:
DEFAULT_THREADSTYLE_XENOMAI=xenomai-user
DEFAULT_THREADSTYLE_RTAI=rtai
DEFAULT_THREADSTYLE_RTPREEMPT=rt-preempt-user

# Pass math-related CFLAGS into the kernel.  These should be appended
# onto EXTRA_CFLAGS to override anything conflicting.
KERNEL_MATH_CFLAGS=""


# Parport: on x86 PC platform, we can use either use
# direct inb/outb or the slower but portable ppdev ioctl
USE_PORTABLE_PARPORT_IO="no"
# reflected in config.h as follows:
# /* build hardware drivers */
# #define USE_PORTABLE_PARPORT_IO /**/

# atomic bitops. We have the inline asm stuff in rtapi_bitops.h
# but that's x86 and ppc only. We could just as well use the
# gcc builtin atomic ops which have appeared since, and whack!
# all portable
USE_GCC_ATOMIC_OPS="no"

# Platforms. set by --enable-platform=<platform>
# see Section 2.1 to enable other platforms, and later to AC_DEFINE it
PLATFORM="PC"
TARGET_PLATFORM=""

# Architecture. Use output of arch(1).
ARCHITECTURE=`$ARCHCMD`


# Name of thread system source file to include, with no extension
# e.g. 'rt-preempt-user'; used to generate #include "rt-preempt-user.h"
# in config.h, rtapi/$(THREADS_SOURCE).c in Makefile.inc
THREADS_SOURCE=""

# xenomai equivalent of pkg-config
XENO_CONFIG=

# whether to build drivers for userland with PCI shim support
USERMODE_PCI=no

# note to mah: dont forget debian/configure FIXME
 

##############################################################################
# Subsection 2.1                                                             #
# Check for arguments to ./configure                                         #
# parse --enable-drivers, --with-kernel, --with-threads, --enable-simulator  #
# complain about --with-realtime                                             #
##############################################################################

AC_MSG_CHECKING(platform)
AC_ARG_WITH(platform,
    [  --with-platform=<platform>   Build for specific platform],
    [
        case "$withval" in
            PC*|pc*)
		TARGET_PLATFORM=PC
                AC_MSG_RESULT([configuring for PC platform])
            ;;
            raspberry*|pi*)
		TARGET_PLATFORM=raspberry
                AC_MSG_RESULT([configuring for Raspberry Pi])
            ;;
            beaglebone*|bb)
		TARGET_PLATFORM=beaglebone
                AC_MSG_RESULT([configuring for BeagleBone board])
            ;;
        esac
	if test -z "$TARGET_PLATFORM"; then
	   AC_MSG_ERROR([ I dont understand $enableval, just PC, raspberry, or beaglebone ]) 
	fi
    ],
    [
      AC_MSG_RESULT([using default platform: $PLATFORM])
      TARGET_PLATFORM="$PLATFORM"
    ])



AC_MSG_CHECKING(whether to build hardware drivers)
AC_ARG_ENABLE(drivers,
    [  --enable-drivers      Build hardware drivers],
    [
        case "$enableval" in
            Y*|y*)
		BUILD_DRIVERS=yes
                AC_MSG_RESULT([explicitly configuring for building hardware drivers])
            ;;
            N*|n*)
		BUILD_DRIVERS=no
                AC_MSG_RESULT([explicitly disabling building hardware drivers])
            ;;
        esac
	if test -z "$BUILD_DRIVERS"; then
	   AC_MSG_ERROR([ I dont understand $enableval, just yes or no ]) 
	fi
    ],
    [
      AC_MSG_RESULT([hardware drivers build will be determined by --with-threads])
    ])

AC_MSG_CHECKING(whether to use inb/outb or ppdev ioctl on the x86 for parport I/O)
AC_ARG_ENABLE(portable-parport,
    [  --enable-portable-parport      Build hal_parport using the ppdev ioctl instead of inb/outb],
    [
        case "$enableval" in
            Y*|y*)
		USE_PORTABLE_PARPORT_IO=yes
                AC_MSG_RESULT([explicitly configuring for ppdev ioctl])
            ;;
            N*|n*)
		USE_PORTABLE_PARPORT_IO=no
                AC_MSG_RESULT([explicitly disabling ppdev ioctl and using inb/outb])
            ;;
        esac
	if test -z "$USE_PORTABLE_PARPORT_IO"; then
	   AC_MSG_ERROR([ I dont understand $enableval, just yes or no ])
	fi
    ],
    [
      AC_MSG_RESULT([using defaults: $USE_PORTABLE_PARPORT_IO])
    ])

AC_MSG_CHECKING(whether to use GCC's builtin atomic operations)
AC_ARG_ENABLE(gcc-atomic-ops,
    [  --enable-gcc-atomic-ops      Build using GCC's builtin atomic operations],
    [
        case "$enableval" in
            Y*|y*)
		USE_GCC_ATOMIC_OPS=yes
                AC_MSG_RESULT([using GCC's builtin atomic operations])
            ;;
            N*|n*)
	        if test "$TARGET_PLATFORM" = "raspberry" -o \( "$TARGET_PLATFORM" = "beaglebone" \); then
		   AC_MSG_ERROR([$TARGET_PLATFORM: ARM platforms need --enable-gcc-atomic-ops=yes])
		fi
 		USE_GCC_ATOMIC_OPS=no
                AC_MSG_RESULT([explicitly disabling GCC's builtin atomic operations])
            ;;
        esac
	if test -z "$USE_GCC_ATOMIC_OPS"; then
	   AC_MSG_ERROR([ I dont understand $enableval, just yes or no ])
	fi
    ],
    [
      if test "$TARGET_PLATFORM" = "raspberry" -o \( "$TARGET_PLATFORM" = "beaglebone" \); then
          AC_MSG_RESULT([ARM platforms($TARGET_PLATFORM): forcing --enable-gcc-atomic-ops=yes])
	  USE_GCC_ATOMIC_OPS=yes
      else
          AC_MSG_RESULT([using defaults: $USE_GCC_ATOMIC_OPS ])
      fi
    ])


AC_MSG_CHECKING(kernel configuration)
AC_ARG_WITH(kernel,
    [  --with-kernel=/boot/config-<kernel-version>  kernel configuration to build for
                        this determines the RT kernel type (RTAI, Xenomai, RT-PREEMPT)
    ],
    [  
	if test -f "$withval"; then 
	    # an absolute path was given
	    KCONFIG="$withval"
	else 
            if test -f "/boot/config-$withval"; then
	        KCONFIG="/boot/config-$withval"
	    else
	       AC_MSG_ERROR([cannot read kernel configuration based on $withval hint ]) 
	    fi
	fi
	AC_MSG_RESULT([using $KCONFIG ])
    ],
    [
      AC_MSG_RESULT([none given, will use running kernel configuration if required])
    ])  

AC_MSG_CHECKING(simulator selection)
AC_ARG_ENABLE(simulator,
    [  --enable-simulator      Run as a pure userspace program],
    [

        case "$enableval" in
            Y*|y*)
                SIMULATOR=yes
                dnl RTS=simulator
		THREADS=posix
                dnl BUILD_SYS=user-dso
		dnl BUILD_DRIVERS=no
                dnl MODEXT=.so
                dnl MODULE_DIR=${prefix}/lib/linuxcnc/modules
                AC_MSG_RESULT([configuring for simulator])
            ;;
            *)
                SIMULATOR=no
		;;
        esac
    ],
    [
        AC_MSG_RESULT([not selected])
        SIMULATOR=no
    ])

AC_MSG_CHECKING(thread style)
AC_ARG_WITH(threads,
    [  --with-threads=<style>   the thread style to use; styles are:
    		                posix,rtai,rt-preempt-user,rt-preempt-kernel,xenomai-user,xenomai-kernel ],
    [  
	if test  "$SIMULATOR" = yes -a \( "$withval" != posix \) ; then
	    AC_MSG_ERROR([ --with-threads=$withval is incompatible with --enable-simulator ]) 
	fi
        case "$withval" in
            posix)
                THREADS=posix	
                AC_MSG_RESULT([configuring for Posix threads])

		if test -n "$KONFIG"; then
		  AC_MSG_ERROR([ --with-threads=posix does not require a kernel configuration - ignored ]) 
		fi
            ;;
            rtai)
                THREADS=rtai	
                AC_MSG_RESULT([configuring for RTAI threads])
            ;;
            rt-preempt-user)
                THREADS=rt-preempt-user	
                AC_MSG_RESULT([configuring for RT_PREEMPT user threads])
            ;;
            rt-preempt-kernel)
                THREADS=rt-preempt-kernel	
                AC_MSG_RESULT([configuring for RT_PREEMPT kernel threads])
            ;;
            xenomai-user)
                THREADS=xenomai-user	
                AC_MSG_RESULT([configuring for Xenomai user threads])
            ;;
            xenomai-kernel)
                THREADS=xenomai-kernel	
                AC_MSG_RESULT([configuring for Xenomai kernel threads])
            ;;
            *)
	    if test -z "$THREADS"; then
	        AC_MSG_ERROR([style must be one of: posix,rtai,rt-preempt-user,rt-preempt-kernel,xenomai-user,xenomai-kernel ]) 
	    fi
	    ;;
        esac  
    ],
    [
      if test "$THREADS" != posix; then
        AC_MSG_RESULT([not set, will guess from kernel configuration ])
      else
        AC_MSG_RESULT([using Posix threads ])
      fi
    ])  


AC_ARG_WITH(realtime,
    [  --with-realtime  A deprecated option, ignored
                   instead, use
		   --with-threads=posix,rtai,rt-preempt-user,rt-preempt-kernel,xenomai-user,xenomai-kernel 
		   and --with-kernel=<config>],
    [  
        AC_MSG_WARN([--with-realtime will be removed soon and has no effect.])
    ],
    [])



# if we dont have a kernel configuration, and the threadstyle requires one, 
# use the running config.
if test -z "$KCONFIG" -a \( "$THREADS" != posix \); then
  AC_MSG_CHECKING(for config file of running kernel)
  kversion=`uname -r`
  if test -z "$kversion"; then 
    AC_MSG_ERROR([cannot determine  kernel configuration - 'uname -r' failed ]) 
  fi
  KCONFIG="/boot/config-$kversion"
  if test -f "$KCONFIG"; then
    AC_MSG_RESULT([Using $KCONFIG as kernel configuration ])
  else
    # try compressed builtin config
    if test -f "/proc/config.gz"; then
       KCONFIG="/proc/config.gz"
       AC_MSG_RESULT([Using compiled-in kernel config $KCONFIG ])
    else
       AC_MSG_ERROR([cannot read $KCONFIG kernel configuration ]) 
    fi
  fi
fi

# a kernel configuration path is set at this point (KCONFIG).
# dig and determine the type of kernel RT system
KTYPE=""
DEFAULT_THREAD_STYLE=""

if test  "$THREADS" != posix; then
    AC_MSG_CHECKING(kernel for type of realtime system)

    # use zgrep to deal with /proc/config.gz
    opt_ipipe=`zgrep '^CONFIG_IPIPE' $KCONFIG |wc -l`
    opt_xeno=`zgrep '^CONFIG_XENO_' $KCONFIG |wc -l`
    opt_preempt_rt=`zgrep '^CONFIG_PREEMPT_RT' $KCONFIG |wc -l`
   
    #echo "forensics: ipipe=$opt_ipipe xeno=$opt_xeno preempt=$opt_preempt_rt"

    if test $opt_ipipe -gt 0 -a \( $opt_xeno -eq 0 \) -a \( $opt_preempt_rt -eq 0 \); then
	KTYPE=rtai
	DEFAULT_THREAD_STYLE=$DEFAULT_THREADSTYLE_RTAI
	AC_MSG_RESULT([looks like a RTAI configuration])
    else 
    if test $opt_ipipe -gt 0 -a \( $opt_xeno -gt 0 \) -a \( $opt_preempt_rt -eq 0 \); then
	KTYPE=xenomai
	DEFAULT_THREAD_STYLE=$DEFAULT_THREADSTYLE_XENOMAI
	AC_MSG_RESULT([looks like a Xenomai configuration ])
    else 
       if test $opt_ipipe -eq 0 -a \( $opt_xeno -eq 0 \) -a \( $opt_preempt_rt -gt 0 \); then
       KTYPE=rt-preempt
       DEFAULT_THREAD_STYLE=$DEFAULT_THREADSTYLE_RTPREEMPT
       AC_MSG_RESULT([looks like a RT_PREEMPT configuration])
    else
	AC_MSG_WARN([failed to guess realtime system from $KCONFIG - building simulator ])
        THREADS=posix	
	fi
	fi
	fi
fi

# check if THREADS style compatible with KTYPE
# if THREADS was not set, set default thread style for this kernel type
AC_MSG_CHECKING(kernel and thread style compatibility)
if `echo $THREADS | grep $KTYPE 1>/dev/null 2>&1`
then
  AC_MSG_RESULT([kernel type $KTYPE and thread style $THREADS are compatible])
else
  if test -z "$THREADS"; then
   THREADS=$DEFAULT_THREAD_STYLE
   AC_MSG_RESULT([setting thread style to $THREADS (default for $KTYPE)])
  else
    if test "$THREADS" != posix; then
        AC_MSG_ERROR([thread style $THREADS and kernel type $KTYPE are incompatible])
    else
        AC_MSG_RESULT([thread style Posix has no special kernel requirements])
    fi
  fi 
fi

# at this point, both THREADS and KCONFIG is set.
# If required, dig for kernel-headers; we need this only for the kernel
# thread styles

if test "$THREADS" = 'rtai' -o \(  "$THREADS" = 'xenomai-kernel' \); then

   # we have a kernel config path; extract version

   # if /proc/config.gz given, then this is for the running kernel
   if test "$KCONFIG" = "/proc/config.gz"; then
      KERNEL_VERSION=`uname -r`
   else
      KERNEL_VERSION=`echo $KCONFIG | sed -e 's/\/boot\/config-//'`
   fi
   AC_MSG_RESULT([building for kernel version $KERNEL_VERSION])

    AC_MSG_CHECKING([for location of kernel headers])
    AC_ARG_WITH(kernel-headers,
	[  --with-kernel-headers=<directory>       Location for kernel headers],
	[ KERNELDIR="$withval"	],
	[ KERNELDIR="/usr/src/linux-headers-$KERNEL_VERSION" ])
	
    if test -d "$KERNELDIR"; then
       AC_MSG_RESULT(using kernel headers from $KERNELDIR)
    else
       AC_MSG_ERROR([kernel header directory not found: $KERNELDIR ])
    fi
fi

# verify this user is member of group xenomai if threads=xenomai-user otherwise
# you get 'Xenomai: binding failed: Operation not permitted.' errors
if test "$THREADS" = xenomai-user; then
   nmatch=`grep -c xenomai /etc/group`
   if test $nmatch -eq 0
   then
       AC_MSG_ERROR([the xenomai group doesnt exist - is the xenomai userland support properly installed? ])
   fi
   nmatch=`id -Gn | grep -c xenomai`
   if test $nmatch -eq 0
   then
       thisuser=`id -un`
       AC_MSG_WARN([the user $thisuser is not member of the xenomai group\
 - please run 'sudo adduser $thisuser xenomai', logout and login again to run linuxcnc])
   fi
fi

# now it's safe to investigate whether we should build with usermode PCI support
# as platform, kernel and thread style is known
AC_MSG_CHECKING(whether to compile PCI drivers with usermode PCI support)
AC_ARG_ENABLE(usermode-pci,
    [  --enable-usermode-pci      Build PCI drivers with usermode PCI support],
    [
        case "$enableval" in
            Y*|y*)
		# scream if this doesnt make sense for the chosen thread style
		case "$THREADS" in
		     rtai|rt-preempt-kernel|xenomai-kernel)
		        AC_MSG_ERROR([ --enable-usermode-pci does not make sense with thread style $THREADS ]) 
		     ;;
		    *)
		        USERMODE_PCI=yes
                        AC_MSG_RESULT([explicitly configuring for usermode PCI support])
		    ;;
		esac
            ;;
            N*|n*)
		USERMODE_PCI=no
                AC_MSG_RESULT([explicitly disabling usermode PCI support])
            ;;
        esac
	if test -z "$USERMODE_PCI"; then
	   AC_MSG_ERROR([ I dont understand $enableval, just yes or no ])
	fi
    ],
    [
      # default: enable if TARGET_PLATFORM=PC and a userland thread style
      case "$THREADS" in

      	   posix)
	      if test "$TARGET_PLATFORM" = "PC" -a \( "$BUILD_DRIVERS" = "yes"  \) ; then
  	      	 USERMODE_PCI=yes
		 AC_MSG_RESULT([posix, but building drivers, so enabling USERMODE_PCI])
		 else
		 AC_MSG_RESULT([posix, not building drivers, so disabling USERMODE_PCI])
	      fi 
	      ;;

           rt-preempt-user|xenomai-user)
               if test "$TARGET_PLATFORM" = "PC" ; then
	           USERMODE_PCI=yes
		   AC_MSG_RESULT([using defaults: platform $TARGET_PLATFORM, threads $THREADS - enabling USERMODE_PCI])
	       else
	           AC_MSG_RESULT([disabling USERMODE_PCI since platform not PC: $TARGET_PLATFORM])
	       fi
	       ;;
	   *)
	       USERMODE_PCI=no
               AC_MSG_RESULT([thread style not applicable for USERMODE_PCI])
	       ;;
      esac
    ])


# now test if libudev is usable if USERMODE_PCI was chosen
LIBUDEV_CFLAGS=
LIBUDEV_LIBS=
if test "$USERMODE_PCI" = "yes"; then
   AC_MSG_CHECKING(for libudev usability since USERMODE_PCI=$USERMODE_PCI)
   if pkg-config libudev >/dev/null 2>&1; then
      LIBUDEV_VER=`pkg-config libudev --version`
      AC_MSG_RESULT(installed - version $LIBUDEV_VER)
      LIBUDEV_CFLAGS=`pkg-config libudev --cflags`
      LIBUDEV_LIBS=`pkg-config libudev --libs`
      LIBS_hold=$LIBS
      LIBS=$LIBUDEV_LIBS
      AC_CHECK_LIB(udev, udev_new, [], [
          echo "Error - libudev isnt usable!"
	  exit -1
	  ])
      LIBS=$LIBS_hold
   else
      AC_MSG_ERROR(no -- please install libudev by sudo apt-get install libudev-dev)
   fi
fi

# Validate the userland part - config programs, directories, libraries  etc
AC_MSG_CHECKING(for $THREADS build support)
SIMULATOR=no
THREADS_SOURCE="${THREADS}"
case "$THREADS" in

    posix)
	# BUILD_DRIVERS already set or default
	# RTPREFIX not needed
	# KERNELDIR not needed
	RTFLAGS= # dso flags for posix - FIXME needed?
	#'BUILD_SYS' - one of 'user-dso', 'kbuild' or 'normal' 
	BUILD_SYS=user-dso
	SIMULATOR=yes	 # tcl legacy
	THREADS_SOURCE="rt-preempt-user"  # use RT_PREEMPT code
    ;;

    rtai)
	if test -z "$WITH_RTDIR"; then
	    DIRS="/usr/realtime-`uname -r` /usr/realtime /usr/realtime* /usr /usr/src/rtai*"
 	else	    
            DIRS="$WITH_RTDIR"
        fi
  	for location in $DIRS; do
    	    for subdir in .  bin; do
	        candidate=$location/$subdir/rtai-config
		if test -z "$RTS" -a -e $candidate; then
		    RTS=$candidate
		    AC_MSG_RESULT([using $RTS for RTAI config values])
		    break
		fi
    	    done
        done
	if test -z "$RTS"; then
	    AC_MSG_ERROR([could not find rtai-config in $DIRS - wrong directory or not installed])
	fi

	# The compiler MUST match the one used to compile the realtime modules if the
	# kernel level code is to function correctly. But if the kernel has been
	# compiled with gcc-2.96, it is unlikely to ever work !

	AC_MSG_CHECKING([for cc version])
  	RTSCC=`$RTS --cc`
	if test -n "$RTSCC"; then
	   AC_MSG_RESULT(found $RTSCC in $RTS) 
	else
	   AC_MSG_RESULT(not specified)
        fi

	BUILD_DRIVERS=yes
	BUILD_SYS=kbuild
	# replace given RTDIR by what rtai-config thinks it is
	RTDIR=`$RTS --prefix`	
	RTDIR=$(cd $RTDIR ; pwd -P )    # make absolute path
  	RTFLAGS=`$RTS --module-cflags`
        RTFLAGS="$RTFLAGS -DRTAI=3"
	RTAI=3
	# or use explicitly set KERNELDIR?
        KERNELDIR=`$RTS --linux-dir`
    	RTARCH=`$RTS --arch`
	test "$RTARCH" = x86_64 && \
	    KERNEL_MATH_CFLAGS="-msse -ffast-math -funsafe-math-optimizations"
	# avoid a naming conflict with /usr/realtime/include/rtai.h
	# this should probably be addressed more betterly
	THREADS_SOURCE="rtai-kernel"
    ;;

    rt-preempt-user|rt-preempt-kernel)
	LIBS_hold=$LIBS
	LIBS="$LIBS -lrt"

	AC_LINK_IFELSE([AC_LANG_PROGRAM([[
	#include <time.h>
	#include <sched.h>
	#include <sys/mman.h>
	]], [[
	struct timespec t;
	clock_gettime(CLOCK_MONOTONIC ,&t);
	clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &t, NULL);
	]])],[AC_MSG_RESULT(linking against $THREADS support library librt.a - works)],[AC_MSG_ERROR(
	Unable to link to librt.a library. If you
	just installed it: try running ldconfig
	as root)])
	LIBS=$LIBS_hold

	BUILD_DRIVERS=yes
	if test "$THREADS" = rt-preempt-user ; then
	   BUILD_SYS=user-dso
	else
	   BUILD_SYS=kbuild
	fi
    ;;

    xenomai-user|xenomai-kernel)
	if test -z "$RTDIR"; then
     	    DIRS="/usr/bin /usr/xenomai/bin"
 	else	    
            DIRS="$RTDIR /usr/xenomai/bin"
        fi
  	for location in $DIRS; do
 	    candidate=$location/xeno-config
	    if test -x $candidate; then
	        RTS=$candidate # not sure this makes sense
		XENO_CONFIG=$candidate
		xenomai_version=`$XENO_CONFIG --version`
		AC_MSG_RESULT([using $XENO_CONFIG for Xenomai config values, version $xenomai_version ])
		break
	    fi
        done
	if test -z "$XENO_CONFIG"; then
	    AC_MSG_ERROR([could not find xeno-config in $DIRS -  wrong directory or libxenomai-dev not installed])
	fi

	CC_hold=$CC
	CFLAGS_hold=$CFLAGS
	CFLAGS="$CFLAGS "`$XENO_CONFIG --skin=native --cflags`
	LIBS_hold=$LIBS
	LIBS="$LIBS "`$XENO_CONFIG --skin=native --ldflags`

	# need to force hard-float for kernel modules
	if test "$THREADS" = xenomai-kernel ; then
  	   RTFLAGS="$CFLAGS  -D_FORTIFY_SOURCE=0 -ffast-math -mhard-float"
	fi

	# Xenomai docs recommend turning off CONFIG_CC_STACKPROTECTOR
	# on all arches but x86_64; this causes missing symbols without
	# this CFLAG
	if ! grep -q CONFIG_X86_64=y $KCONFIG; then
	  RTFLAGS="$RTFLAGS -fno-stack-protector"
	fi

	test "$THREADS" = xenomai-kernel -a "$($XENO_CONFIG --arch)" = x86 && \
	    KERNEL_MATH_CFLAGS="-msse -ffast-math -funsafe-math-optimizations"

	AC_MSG_CHECKING([for cc version])
  	RTSCC=`$XENO_CONFIG --cc`
	if test -n "$RTSCC"; then
	   AC_MSG_RESULT(found $RTSCC in $XENO_CONFIG) 
	else
	   AC_MSG_RESULT(not specified)
        fi

	AC_LINK_IFELSE([AC_LANG_PROGRAM([[
	#include <native/task.h>
	#include <native/timer.h>
	RT_TASK demo_task;
        RTIME now;
	]], [[
        rt_task_create(&demo_task, "trivial", 0, 99, 0);
        rt_task_set_periodic(NULL, TM_NOW, 1000000000);
        rt_timer_read();
	]])],[AC_MSG_RESULT(linking against xenomai support library - works)],[AC_MSG_ERROR(
	Unable to link to Xenomai support library. If you
	just installed it: try running ldconfig
	as root)])
	LIBS=$LIBS_hold
	CFLAGS=$CFLAGS_hold
	CC=$CC_hold

	BUILD_DRIVERS=yes
	if test "$THREADS" = xenomai-user ; then
	   BUILD_SYS=user-dso
	else
	   BUILD_SYS=kbuild
	fi
    ;;
    *)
    AC_MSG_ERROR([duh? thread-style = $THREADS ]) 
    ;;
esac  

AC_PROG_CC([$RTSCC gcc])
AC_PROG_CPP()

if test -z "$CC"; then
  AC_MSG_ERROR([no acceptable cc found])
elif ! test `$CC -dumpversion | cut -d '.' -f 1` -gt 2 ; then
  AC_MSG_ERROR([Compilers older than gcc 3.x are no longer supported])
fi

# RTPREFIX: used in:
# src/Makefile.inc
# src/Makefile 
# src/module_helper/Submakefile
# scripts/realtime
# scripts/rtapi.conf
RTPREFIX=$THREADS


AC_SUBST(SIMULATOR)
AC_SUBST([RTNAME])

AC_SUBST([RTAI])
AC_SUBST([RTPREFIX])
AC_SUBST([KERNELDIR])
AC_SUBST([RTFLAGS])
AC_SUBST([RTDIR])
AC_SUBST([RTARCH])
AC_SUBST([KERNEL_MATH_CFLAGS])

if test "$BUILD_DRIVERS" = yes; then
   AC_DEFINE(BUILD_DRIVERS, [], [build hardware drivers])
fi
AC_SUBST(BUILD_DRIVERS)

if test "$USERMODE_PCI" = yes; then
   AC_DEFINE(USERMODE_PCI, [], [build PCI drivers with usermode PCI support])
fi
AC_SUBST(USERMODE_PCI)
AC_SUBST(LIBUDEV_CFLAGS)
AC_SUBST(LIBUDEV_LIBS)
AC_DEFINE(HAVE_LIBUDEV, [], [libudev installed and available])

if test "$USE_GCC_ATOMIC_OPS" = yes; then
   AC_DEFINE(USE_GCC_ATOMIC_OPS, [], [use GCC builtin atomic operations])
fi
AC_SUBST(USE_GCC_ATOMIC_OPS)

if test "$USE_PORTABLE_PARPORT_IO" = yes; then
   AC_DEFINE(USE_PORTABLE_PARPORT_IO, [], [use ppdev ioctl instead of inb/outb])
fi
AC_SUBST(USE_PORTABLE_PARPORT_IO)

if test "$TARGET_PLATFORM" = "PC"; then
   TARGET_PLATFORM_PC=1
   AC_DEFINE(TARGET_PLATFORM_PC, [], [build for PC platform])
fi
if test "$TARGET_PLATFORM" = "raspberry"; then
   TARGET_PLATFORM_RASPBERRY=1
   AC_DEFINE(TARGET_PLATFORM_RASPBERRY, [], [build for Raspberry Pi platform])
fi
if test "$TARGET_PLATFORM" = "beaglebone"; then
   TARGET_PLATFORM_BEAGLEBONE=1
   AC_DEFINE(TARGET_PLATFORM_BEAGLEBONE, [], [build for BeagleBone platform])
fi
AC_SUBST(TARGET_PLATFORM)


AC_SUBST(ARCHITECTURE)
AC_SUBST(XENO_CONFIG)


# man, is this lame
case $BUILD_SYS in
  user-dso)
      AC_DEFINE(BUILD_SYS_USER_DSO, [], [build modules as .so shared objects])
      ;;
  kbuild)
      AC_DEFINE(BUILD_SYS_KBUILD, [], [build modules through kbuild])
      ;;
  normal)
      # I dont see _anything_ 'normal' here
      AC_DEFINE(BUILD_SYS_NORMAL, [], [build normal (unused)])
      ;;
esac
AC_SUBST(BUILD_SYS)

dnl threadstyle=`echo $THREADS |tr '[a-z\-]' '[A-Z_]'`
dnl AC_DEFINE_UNQUOTED([RTAPI_$threadstyle], [], [thread style])
dnl AC_SUBST(RTAPI_$threadstyle)
case $THREADS in
  posix)
      AC_DEFINE(RTAPI_POSIX, [], [thread style posix])
      ;;
  rtai)
      AC_DEFINE(RTAPI_RTAI, [], [thread style rtai])
      ;;
  xenomai-user)
      AC_DEFINE(RTAPI_XENOMAI_USER, [], [thread style xenomai-user])
      ;;
  xenomai-kernel)
      AC_DEFINE(RTAPI_XENOMAI_KERNEL, [], [thread style xenomai-kernel])
      ;;
  rt-preempt-user)
      AC_DEFINE(RTAPI_RTPREEMPT_USER, [], [thread style rt-preempt-user])
      ;;
  rt-preempt-kernel)
      AC_DEFINE(RTAPI_RTPREEMPT_KERNEL, [], [thread style rt-preempt-kernel])
      ;;
esac
AC_SUBST(THREADS)
AC_DEFINE_UNQUOTED(THREADS_HEADERS,"rtapi/${THREADS_SOURCE}.h",
	[thread system settings header file])
AC_SUBST(THREADS_SOURCE)

# while we are at it, drop a git scent mark
GIT_VERSION=unknown
gitcmd=`which git`
if test -n "$gitcmd"; then
   version=`(cd ..;scripts/get-version-from-git)` 2>/dev/null
   if test -n "$version"; then
      GIT_VERSION=$version
   fi
fi
AC_SUBST(GIT_VERSION)


EMC2_HOME=`(cd .. ; pwd)`
AC_SUBST([EMC2_HOME])

AC_DEFINE_UNQUOTED([RTDIR], "$RTDIR", [Directory of the installed realtime system])

##############################################################################
# Section 3                                                                  #
# aditional checking                                                         #
# Subsection 3.1 - checking for a CC (we must use the same one used for RT)  #
# Subsection 3.2 - check for the kernel version, with RT patches             #
# Subsection 3.3 - check the moduledir where modules can get installed       #
# Subsection 3.4 - check for GTK                                             #
# Subsection 3.5 - check for utility programs needed to build and run EMC    #
##############################################################################


##############################################################################
# Subsection 3.1 - checking for a CC (we must use the same one used for RT)  #
# Check CC version - (P.C.) We need to verify the compiler is the same one   #
# used for the realtime extensions... Hence the need to find the RT signature# 
# first.                                                                     #
# $RTS --cc should return the C compiler used - Verify this is acceptable.   #
# if version is gcc-2.96 check for alternative                               #
##############################################################################

AC_MSG_CHECKING([for usability of rdtscll from asm/msr.h])
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include <asm/msr.h>
#include <stdio.h>
void use_rdtscll(void) { long long tsc; rdtscll(tsc); }
]], [[]])],[
        MSR_H_USABLE=yes
        AC_DEFINE([MSR_H_USABLE], [], [Define to 1 if asm/msr.h is usable and defines rdtscll])
    ],[MSR_H_USABLE=no])
AC_MSG_RESULT($MSR_H_USABLE)

AC_MSG_CHECKING([for usability of linux/hidraw.h])
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include <sys/ioctl.h>
#include <linux/hidraw.h>
long hidiocgrawinfo = HIDIOCGRAWINFO;
    ]], [[]])],[
	HIDRAW_H_USABLE=yes
        AC_DEFINE([HIDRAW_H_USABLE], [], [Define to 1 if linux/hidraw.h is usable and defines HIDIOCGRAWINFO])
],[HIDRAW_H_USABLE=no])
AC_MSG_RESULT($HIDRAW_H_USABLE)
AC_SUBST([HIDRAW_H_USABLE])

##############################################################################
# Subsection 3.2 - check for the kernel version, with RT patches             #
#----------------------------------------------------------------------------#
# Check with the version.h to find the uts-kernel version.                   #
# This should be a more reliable way of determining the kernel that          #
# is being used to compile against - `uname -r` only returns the             #
# running kernel version which is may not be the one the code is             #
# compiled against.                                                          #
##############################################################################

case $THREADS in
    rt-preempt-kernel|rtai|xenomai-kernel)
    AC_CHECK_HEADERS([$KERNELDIR/include/linux/version.h],[],
        [AC_MSG_ERROR([version.h not found - Is the kernel headers package installed ?])])

    # Unfortunately, many distributions (redhat, mandrake) have #defines
    # inside version.h, so a simple cat|grep|cut test won't work... But then again,
    # RH & Mandrake kernels are notorious for their use of patches that break
    # the RT patching - Both RTAI and RTLinux strongly recommend using
    # a virgin source from kernel.org.

    # Get the kernel version from version.h
    AC_MSG_CHECKING([for kernel version string])

    if test -e $KERNELDIR/include/linux/utsrelease.h; then
	VERSION_FILE=$KERNELDIR/include/linux/utsrelease.h
    elif test -e $KERNELDIR/include/generated/utsrelease.h; then
	VERSION_FILE=$KERNELDIR/include/generated/utsrelease.h
    else
	VERSION_FILE=$KERNELDIR/include/linux/version.h
    fi
    KERNEL_VERS=`$CC -E -dM ${VERSION_FILE} | grep UTS | cut -d '"' -f 2`

    if test -z "$KERNEL_VERS"; then 
	AC_MSG_ERROR(Kernel version string not found)
    fi

    AC_MSG_RESULT([$KERNEL_VERS])
    AC_SUBST([KERNEL_VERS])
    AC_DEFINE_UNQUOTED([RTAPI_KERNEL_VERSION], "$KERNEL_VERS", [Required kernel version])

    if test $THREADS = xenomai-kernel; then
       	# no support in xeno-config, so force
        MODEXT=".ko" 
    else
	# Do a quick test for module extension..
	AC_MSG_CHECKING([for kernel module extension])
    	MODEXT=`$RTS --module-ext 2>/dev/null` || MODEXT=".o"
    	if test "x" = "x$MODEXT"; then
	   MODEXT=".o"
	fi
    fi
    AC_MSG_RESULT([$MODEXT])

    # This check should see if kbuild is or isn't used
    AC_MSG_CHECKING([kernel build system])
    # FIXME FIXME FIXME
    # right now it will assume based on the kernel module extension
    EXT_RTFLAGS=""
    BUILD_SYS="kbuild"

    if test "x$MODEXT" = "x.ko" ; then
	BUILD_SYS="kbuild"
    else
	EXT_RTFLAGS="-DEXPORT_SYMTAB"
    fi

    AC_ARG_WITH(kbuild,
	[  --with-kbuild=<y/n>                     Specify if your kernel uses kbuild or not],
	[
	    case "$withval" in
	    "" | y | ye | yes )
		BUILD_SYS="kbuild"
	      ;;
	    n | no )
		BUILD_SYS="normal"
	      ;;
	    esac
	])
    AC_MSG_RESULT([$BUILD_SYS])
    ;;
   posix|xenomai-user|rt-preempt-user)
      MODEXT=".so"
   ;;
   *)
   echo "duh?" THREADS=$THREADS
   ;;
esac
AC_SUBST([MODEXT])
AC_DEFINE_UNQUOTED([MODULE_EXT], "$MODEXT", [Extension for realtime modules])
AC_SUBST([BUILD_SYS])
AC_SUBST([EXT_RTFLAGS])

##############################################################################
# Subsection 3.3 - check the moduledir where modules can get installed       #
#                                                                            #
# Provides the user the possibility to specify (--with-module-dir=<path>)    #
# If not specified default inside /lib/modules/${KERNEL_VERS}/               #
# to the location where a RT-module gets found (mbuff.o or rtai_shm.o)       #
# (maybe the default should be /lib/modules/$KERNEL_VERS/extra if it exists? #
##############################################################################

# Create a module-dir option, similar to rtai's...
AC_MSG_CHECKING([for module installation directory])

AC_ARG_WITH(module-dir,
    [  --with-module-dir=<module-dir>          Installation directory for kernel modules],
    [
        case "$withval" in
        "" | y | ye | yes | n | no)
            AC_MSG_ERROR([You must supply a path for --with-module-dir.])
          ;;
        esac
        MODULE_DIR="$withval"
    ])


# if not specified, ask the realtime config script where the directory is
# if the config script returns an error, set MODULE_DIR to nothing
if test "x" = "x$MODULE_DIR" ; then
  MODULE_DIR=`$RTS --module-dir 2>/dev/null`
  if ! test -d $MODULE_DIR ; then
    AC_MSG_ERROR([$RTS --module-dir did not specify an existing directory.  You must use specify it using --with-module-dir=...])
  fi
fi
    
if test "$RUN_IN_PLACE" = "yes"; then
    RIP_MODULE_DIR="${BUILD_TOPLEVEL}/rtlib"
    AC_MSG_RESULT([configuring for run-in-place])
    prefix=${BUILD_TOPLEVEL}
    DEFAULT_NMLFILE=${prefix}/configs/common/linuxcnc.nml
    DEFAULT_TOOLTABLE=${prefix}/configs/sim/sim.tbl
    AC_MSG_RESULT([$RIP_MODULE_DIR])
else
    RUN_IN_PLACE=no
    EMC2_HOME=$prefix
    DEFAULT_NMLFILE=${prefix}/share/linuxcnc/linuxcnc.nml
    AC_MSG_RESULT([$MODULE_DIR])
fi

AC_ARG_ENABLE(run-in-place,
    [  --enable-run-in-place   A deprecated flag
                          (instead, configure without specifying --prefix)],
    [
        if ! test -z "$enableval"; then
            AC_MSG_WARN([--enable-run-in-place will be removed soon.
Configure without specifying --prefix to get a run-in-place build.])
        fi
    ])

AC_SUBST([MODULE_DIR])
AC_SUBST([RIP_MODULE_DIR])
AC_SUBST([RUN_IN_PLACE])
AC_SUBST([DEFAULT_NMLFILE])
AC_DEFINE_UNQUOTED([EMC2_DEFAULT_NMLFILE], "$DEFAULT_NMLFILE", [Default nml file])
AC_DEFINE_UNQUOTED([EMC2_DEFAULT_TOOLTABLE], "$DEFAULT_TOOLTABLE", [Default nml file])

##############################################################################
# Subsection 3.4 - define default dirs, these get used in a lot of places    #
# we decide based on RIP or install where stuff goes                         #
##############################################################################

fe () {
    # Fully expand argument.  Example:
    # ${datadir} -> ${datarootdir} -> ${prefix}/share -> /usr/local
    case "$1" in
    *\$*) eval fe \""$1"\" ;;
    *) echo "$1" ;;
    esac
}

if test "xyes" = "x$RUN_IN_PLACE"; then
    EMC2_LATENCY_SCRIPT=$EMC2_HOME/scripts/latency-test
    EMC2_LATENCYPLOT_SCRIPT=$EMC2_HOME/scripts/latencyplot
    EMC2_SCRIPT=$EMC2_HOME/scripts/emc
    EMC2_SUFFIX=" (run-in-place)"
    EMC2_ICON=$EMC2_HOME/linuxcncicon.png
    EMC2_BIN_DIR=$EMC2_HOME/bin
    EMC2_TCL_DIR=$EMC2_HOME/tcl
    EMC2_TCL_LIB_DIR=$EMC2_HOME/tcl
    EMC2_LANG_DIR=$EMC2_HOME/src/objects
    EMC2_PO_DIR=$EMC2_HOME/share/locale
    EMC2_HELP_DIR=$EMC2_HOME/docs/help
    EMC2_RTLIB_DIR=$EMC2_HOME/rtlib
    LINUXCNC_CONFIG_PATH="~/linuxcnc/configs:$EMC2_HOME/configs"
    EMC2_NCFILES_DIR=$EMC2_HOME/nc_files
    REALTIME=$EMC2_HOME/scripts/realtime
    EMC2_IMAGE_DIR=$EMC2_HOME
else
    EMC2_HOME=${prefix}
    EMC2_BIN_DIR=${prefix}/bin
    EMC2_LATENCY_SCRIPT=$EMC2_BIN_DIR/latency-test
    EMC2_LATENCYPLOT_SCRIPT=$EMC2_BIN_DIR/latencyplot
    EMC2_SCRIPT=$EMC2_BIN_DIR/emc
    EMC2_SUFFIX=""
    EMC2_ICON=linuxcncicon
    EMC2_TCL_DIR=${prefix}/lib/tcltk/linuxcnc
    EMC2_TCL_LIB_DIR=${prefix}/lib/tcltk/linuxcnc
    EMC2_LANG_DIR=${prefix}/share/linuxcnc/tcl/msgs
    EMC2_PO_DIR=${prefix}/share/locale
    EMC2_HELP_DIR=${prefix}/share/doc/linuxcnc
    case $MODULE_DIR in
        */linuxcnc*) EMC2_RTLIB_DIR=$MODULE_DIR ;;
	*) EMC2_RTLIB_DIR=$MODULE_DIR/linuxcnc
    esac
    LINUXCNC_CONFIG_PATH="~/linuxcnc/configs:/usr/local/etc/linuxcnc/configs:"$(eval echo $EMC2_HELP_DIR)"/examples/sample-configs"
    EMC2_NCFILES_DIR=${prefix}/share/linuxcnc/ncfiles
    REALTIME=/etc/init.d/realtime
    EMC2_IMAGE_DIR=$(fe "$datadir")/linuxcnc
fi

AC_DEFINE_UNQUOTED([EMC2_HOME], "$EMC2_HOME", [Prefix or RIP directory])
AC_DEFINE_UNQUOTED([EMC2_BIN_DIR], "$EMC2_BIN_DIR", [Directory for binaries])
AC_DEFINE_UNQUOTED([EMC2_TCL_DIR], "$EMC2_TCL_DIR", [Directory for tcl scripts])
AC_DEFINE_UNQUOTED([EMC2_HELP_DIR], "$EMC2_HELP_DIR", [Directory for help files])
AC_DEFINE_UNQUOTED([EMC2_RTLIB_DIR], "$EMC2_RTLIB_DIR", [Directory of realtime system])
AC_DEFINE_UNQUOTED([EMC2_LANG_DIR], "$EMC2_LANG_DIR", [Directory for tcl translation files])
AC_DEFINE_UNQUOTED([EMC2_PO_DIR], "$EMC2_PO_DIR", [Directory for po/mo translation files])
AC_DEFINE_UNQUOTED([EMC2_CONFIG_DIR], "$EMC2_CONFIG_DIR", [Directory for configuration files])
AC_DEFINE_UNQUOTED([EMC2_NCFILES_DIR], "$EMC2_NCFILES_DIR", [Directory for nc files])
AC_DEFINE_UNQUOTED([EMC2_IMAGE_DIR], "$EMC2_IMAGE_DIR", [Directory for images])
AC_DEFINE_UNQUOTED([GIT_VERSION], "$GIT_VERSION", [Git version tag])
AC_SUBST([EMC2_BIN_DIR])
AC_SUBST([EMC2_TCL_DIR])
AC_SUBST([EMC2_TCL_LIB_DIR])
AC_SUBST([EMC2_HELP_DIR])
AC_SUBST([EMC2_RTLIB_DIR])
AC_SUBST([EMC2_LANG_DIR])
AC_SUBST([LINUXCNC_CONFIG_PATH])
AC_SUBST([EMC2_NCFILES_DIR])
AC_SUBST([REALTIME])
AC_SUBST([EMC2_IMAGE_DIR])
AC_SUBST([EMC2_SCRIPT])
AC_SUBST([EMC2_LATENCY_SCRIPT])
AC_SUBST([EMC2_LATENCYPLOT_SCRIPT])
AC_SUBST([EMC2_SUFFIX])
AC_SUBST([EMC2_ICON])
AC_SUBST([GIT_VERSION])

##############################################################################
# Subsection 3.5 - check for GTK                                             #
# FIXME: allow it to be enabled or disabled command line                     #
##############################################################################

AC_MSG_CHECKING([for glib])
if pkg-config glib-2.0 >/dev/null 2>&1; then
  GLIB_VER=`pkg-config glib-2.0 --modversion`
  AC_MSG_RESULT(yes - $GLIB_VER)
  GLIB_CFLAGS=`pkg-config glib-2.0 --cflags`
  GLIB_LIBS=`pkg-config glib-2.0 --libs`
else
  AC_MSG_ERROR(no -- required until somebody makes modbus optional)
fi


AC_ARG_ENABLE(gtk,
    [  --disable-gtk        Disable the parts of emc2 that depend on GTK],
    [
	case "$enableval" in
	Y*|y*)
	    BUILD_GTK=yes ;;
	*)
	    BUILD_GTK=no ;;
	esac
    ],
    [BUILD_GTK=yes])

if test "$BUILD_GTK" = "yes"; then
  AC_MSG_CHECKING([for GTK 2.4.0 or above])
  if pkg-config gtk+-2.0 --atleast-version 2.4.0 >/dev/null 2>&1; then
    GTK_VER=`pkg-config gtk+-2.0 --modversion`
    AC_MSG_RESULT(yes - $GTK_VER)
    GTK_CFLAGS=`pkg-config gtk+-2.0 --cflags`
    GTK_LIBS=`pkg-config gtk+-2.0 --libs`
    AC_MSG_CHECKING(for libgnomeprintui-2.2)
    if pkg-config --exists libgnomeprintui-2.2; then
      AC_MSG_RESULT(yes)
      GTK_CFLAGS="$GTK_CFLAGS `pkg-config --cflags libgnomeprintui-2.2`"
      GTK_LIBS="$GTK_LIBS `pkg-config --libs libgnomeprintui-2.2`"
      HAVE_GNOMEPRINT=yes
    else
      AC_MSG_RESULT(no -- printing from classicladder will not be possible)
      HAVE_GNOMEPRINT= 
    fi
  else
    AC_MSG_RESULT(no)
    AC_MSG_ERROR([GTK2 missing.  Install it or specify --disable-gtk to skip the parts of emc2 that depend on GTK])
  fi
fi

AC_SUBST(HAVE_GNOMEPRINT)
AC_SUBST(GTK_VER)
AC_SUBST(GTK_LIBS)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GLIB_LIBS)
AC_SUBST(GLIB_CFLAGS)

##############################################################################
# Subsection 3.6 - check for utility programs needed to build and run EMC    #
#                                                                            #
# Check for all the utility programs we need to build and install emc        #
# as well as those we use in the emc scripts...                              #
##############################################################################

SPATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin
AC_PROG_CXX

AC_PATH_PROG(CXX,$CXX,"none")
if test $CXX = "none"
then
    AC_MSG_ERROR([C++ compiler not found])
fi

AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PATH_PROG(AR,ar)
AC_PATH_PROG(INSTALL, install)
AC_PATH_PROG(SED, sed)
AC_PATH_PROG(PS, ps)
AC_PATH_PROG(KILL, kill)
AC_PATH_PROG(WHOAMI, whoami)
AC_PATH_PROG(AWK, awk)
AC_PATH_PROG(INSMOD, insmod, $SPATH)
AC_PATH_PROG(RMMOD, rmmod, "", $SPATH)
AC_PATH_PROG(LSMOD, lsmod, "", $SPATH)
AC_PATH_PROG(PIDOF, pidof, "", $SPATH)
AC_PATH_PROG(IPCS, ipcs, "")
AC_PATH_PROG(FUSER, fuser, "", $SPATH)
AC_PATH_PROG(MANDB, mandb, "")

AC_ARG_WITH(rmmod,
    [  --with-rmmod=</path/rmmod>              rmmod variant],
    [
	case "$withval" in
	"" | y | ye | yes)
	    AC_MSG_ERROR([You must supply an argument to --with-rmmod.])
	  ;;
	n | no | none)
	    RMMOD=""
	  ;;
	*)
	    RMMOD="$withval"
	esac
    ],
    [
            RMMOD="$EMC2_BIN_DIR/linuxcnc_module_helper remove"
    ])

AC_ARG_WITH(insmod,
    [  --with-insmod=</path/insmod>            insmod variant],
    [
	case "$withval" in
	"" | y | ye | yes)
	    AC_MSG_ERROR([You must supply an argument to --with-insmod.])
	  ;;
	n | no | none)
	    INSMOD=""
	  ;;
	*)
	    INSMOD="$withval"
	esac
    ],
    [
            INSMOD="$EMC2_BIN_DIR/linuxcnc_module_helper insert"
    ])

##############################################################################
# Subsection 3.7 - check for programs needed to build documentation          #
#                                                                            #
# Check for LyX and other programs we need to build and install docs.        #
# (Optional, if not present, just don't build the docs.)                     #
##############################################################################

AC_ARG_WITH(python,
    [  --with-python=<path>                    Specify the Python interpreter],
    [
        PYTHON=$withval
    ],[
        PYTHON=python
    ])
AC_PATH_PROG(PYTHON,$PYTHON,"none")
if test $PYTHON = "none"
then
    AC_MSG_ERROR([python not found])
fi

AC_MSG_CHECKING([whether to build documentation])
AC_ARG_ENABLE(build-documentation,
    [  --enable-build-documentation[=format]   Build documentation.
              Format may be "pdf" or "html" if only one format is desired.],
    [
        case "$enableval" in
        Y*|y*|html,pdf|pdf,html)
            BUILD_DOCS=yes
            BUILD_DOCS_PDF=yes
            BUILD_DOCS_HTML=yes
            AC_MSG_RESULT([PDF and HTML requested])
        ;;
        html)
            BUILD_DOCS=yes
            BUILD_DOCS_PDF=no
            BUILD_DOCS_HTML=yes
            AC_MSG_RESULT([HTML requested])
	;;
        pdf)
            BUILD_DOCS=yes
            BUILD_DOCS_PDF=yes
            BUILD_DOCS_HTML=no
            AC_MSG_RESULT([PDF requested])
	;;
        *)
            BUILD_DOCS=no
            AC_MSG_RESULT([no])
        ;;
    esac
    ],
    [
        BUILD_DOCS=no
        AC_MSG_RESULT([no])
    ])

# Programs required for building all documentation
if ( test "$BUILD_DOCS" = "yes" ) ; then
    if ( test "none" = "$PYTHON" ) ; then
        AC_MSG_ERROR([no python, documentation cannot be built])
    fi

    AC_PATH_PROG(ASCIIDOC,asciidoc,"none")
    if ( test "none" = "$ASCIIDOC" ) ; then
	AC_MSG_ERROR([no AsciiDoc, documentation cannot be built])
    fi

    AC_MSG_CHECKING([asciidoc version])
    set -- `asciidoc --version`; ASCIIDOC_VER=$2
    set -- `echo $ASCIIDOC_VER | sed 's/\./ /g'`

    if test $1 -lt 8 -o \( $1 -eq 8 -a $2 -lt 5 \); then
        AC_MSG_ERROR([asciidoc version $ASCIIDOC_VER less than 8.5.
Documentation cannot be built.
On Lucid, install the regular asciidoc from Ubuntu by running "sudo apt-get install asciidoc".
On Hardy, install the backported asciidoc available from the linuxcnc.org debian archive.
On other systems, do what you need to install asciidoc version 8.5 or newer.])
    fi
    AC_MSG_RESULT([$ASCIIDOC_VER])

    AC_PATH_PROG(DBLATEX,dblatex,"none")
    if ( test "none" = "$DBLATEX" ) ; then
	AC_MSG_ERROR([no dblatex, documentation cannot be built])
    fi

    AC_MSG_CHECKING([dblatex version])
    set -- `dblatex --version`; DBLATEX_VER=$3
    set -- `echo $DBLATEX_VER | sed 's/[[.-]]/ /g'`

    if test $1 -eq 0 -a \( $2 -lt 2 -o \( $2 -eq 2 -a ${3:-0} -lt 12 \) \); then
        AC_MSG_ERROR([dblatex version $DBLATEX_VER less than 0.2.12.
Documentation cannot be built.])
    fi
    AC_MSG_RESULT([$DBLATEX_VER])


    AC_PATH_PROG(SOURCE_HIGHLIGHT,source-highlight,"none")
    if ( test "none" = "$SOURCE_HIGHLIGHT" ) ; then
	AC_MSG_ERROR([no source-highlight, documentation cannot be built])
    fi


    AC_PATH_PROG(CONVERT,convert,"none")
    if ( test "none" = "$CONVERT" ) ; then
	AC_MSG_ERROR([no convert, documentation cannot be built])
    fi

    AC_PATH_PROG(GS,gs,"none")
    if ( test "none" = "$GS" ) ; then
	AC_MSG_ERROR([no gs, documentation cannot be built])
    fi
fi

# Programs required only for building the PDF documentation
if ( test "$BUILD_DOCS_PDF" = "yes" ) ; then
    AC_PATH_PROG(DBLATEX,dblatex,"none")
    if ( test "none" = "$DBLATEX" ) ; then
	AC_MSG_ERROR([no dblatex, PDF documentation cannot be built])
    fi

    AC_PATH_PROG(PDFLATEX,pdflatex,"none")
    if ( test "none" = "$PDFLATEX" ) ; then
	AC_MSG_ERROR([no pdflatex, PDF documentation cannot be built])
    fi

    AC_PATH_PROG(EPSTOPDF,epstopdf,"none")
    if ( test "none" = "$EPSTOPDF" ) ; then
	AC_MSG_ERROR([no epstopdf, PDF documentation cannot be built])
    fi
fi

# Programs required only for building the HTML documentation
if ( test "$BUILD_DOCS_HTML" = "yes" ) ; then
    AC_PATH_PROG(XSLTPROC,xsltproc,"none")
    if ( test "none" = "$XSLTPROC" ) ; then
	AC_MSG_ERROR([no xsltproc, HTML documentation cannot be built])
    fi

    AC_PATH_PROG(DVIPNG,dvipng,"none")
    if ( test "none" = "$DVIPNG" ) ; then
	AC_MSG_ERROR([no dvipng, HTML documentation cannot be built])
    fi

    AC_MSG_CHECKING([for HTML support in groff])
    if ! groff -Thtml < /dev/null > /dev/null 2>&1 ; then
        AC_MSG_ERROR([no groff -Thtml, HTML documentation cannot be built])
    else
        AC_MSG_RESULT(yes)
    fi
fi
AC_SUBST(BUILD_DOCS)
AC_SUBST(BUILD_DOCS_PDF)
AC_SUBST(BUILD_DOCS_HTML)

#############################################################################
# Section 4 - Check for math support                                         #
#                                                                            #
# Because some of the realtime kernel modules use floating point math        #
# which is not supported by standard kernel calls, we need to link to        #
# libm. RTAI provides a loadable module derived from uclibc (a minimal       #
# glibc implimentaion for embedded systems). Alternatively, we can link      #
# to dietlibc - Most distros package this as diet or dietlibc. Debian        #
# splits the headers and static libs into dietlibc-dev..                     #
# If neither of the two preferred options are available, then the default    #
# GNU glibc math library will have to be used. This will cause problems      #
# if certain functions found in libc.so are not stubbed, hence the following #
# tests and linking to mathstubs.o at a later stage.                         #
##############################################################################

if test "$SIMULATOR" != "yes"
then
AC_MSG_CHECKING([for kernel math support])
USE_LIBM=""
USE_RTLIBM=""
USE_STUBS=""
MATHLIB=""
MATHINC=""

#we need to make sure that $RTS has a --module-dir option
#only rtai-config has, well rtlinux-config has a --module_dir and lacks the rtai_* modules
if test $THREADS = rtai ; then
    if (test -r $($RTS --module-dir)/rtai_math${MODEXT} ) ; then
       USE_RTLIBM=1
    fi
fi

if (test -r $RTDIR/modules/rtai_libm${MODEXT} ) || (test $USE_RTLIBM) || (test -r /lib/modules/${KERNEL_VERS}/rtai/rtai_libm${MODEXT}) ; then
    # Found a suitable kernel module..
    MATHLIB=
    USE_RTLIBM=1
    AC_MSG_RESULT([ok, using RTAI's libm kernel module])
# Note: need to search /lib/modules/$KERNEL_VER for the math modules..
#       or `$RTS --module-dir`...
else
    AC_MSG_RESULT([no])
    AC_MSG_CHECKING([for a suitable libm])
    rm -f tests/mathtest.o tests/mathtest 2>/dev/null
    # compile a sample first.
    $CC -c tests/mathtest.c $RTFLAGS -o tests/mathtest.o 2>/dev/null
    
    DIET_DIR=$(find /usr/lib -maxdepth 2 -name diet* | head -n1)
    if (test "$DIET_DIR" != "" ) ; then
        # Run a test to see if it will work...
        ld -r -static tests/mathtest.o -o tests/mathtest -L$DIET_DIR/lib-i386 -lm 2>/dev/null
        if (test "$(nm -u tests/mathtest | grep -v ende)" = "" ) ; then
            AC_MSG_RESULT([diet lib OK to use.])
            USE_DIET=1
            MATHLIB="-L$DIET_DIR/lib-i386 -lm"
            MATHINC="-I$DIET_DIR/include"
        fi
    fi
    if (test "$USE_DIET" = "" ) ; then
        # Test the standard libm
    rm -f tests/mathtest 2>/dev/null
    ld -r -static tests/mathtest.o -o tests/mathtest -L/usr/lib -lm 2>/dev/null
        if ! nm -u tests/mathtest ; then
            AC_MSG_RESULT([libm OK to use.])
            USE_LIBM=1
            MATHLIB="-L/usr/lib -lm"
        else
            # We need to link to mathstubs if we are to use the glibc libm
            AC_MSG_WARN([Using glibc libm with mathstubs.
			If unresolved symbols are reported when loading kernel modules
			please file a bug report.])
            USE_LIBM=1
	    USE_STUBS=1
            MATHLIB="-L/usr/lib -lm"
        fi
    fi
    rm -f tests/mathtest.o tests/mathtest 2>/dev/null
fi

AC_SUBST([USE_LIBM])
AC_SUBST([USE_STUBS])
AC_SUBST([USE_RTLIBM])
AC_SUBST([MATHINC])
AC_SUBST([MATHLIB])

for m in adeos rtai_hal rtai_ksched rtai_fifos rtai_shm rtai_sem rtai_math \
        rtai rt_mem_mgr rtai_sched rtai_libm \
        rtl mbuff rtl_time rtl_sched rtl_posixio rtl_fifo xeno_math; do
    AC_MSG_CHECKING([for $m])
    TMP=$(find $MODULE_DIR -name $m$MODEXT 2>/dev/null)
    if test -z "$TMP"; then
        TMP=$(find /lib/modules/$KERNEL_VERS -name $m$MODEXT)
    fi
    eval MODPATH_$m=${TMP/$KERNEL_VERS/\\\$\\\(uname\\\ -r\\\)}
    AC_MSG_RESULT([${TMP:-not found}])
done

AC_SUBST(MODPATH_adeos)
AC_SUBST(MODPATH_rtai_hal)
AC_SUBST(MODPATH_rtai_ksched)
AC_SUBST(MODPATH_rtai_fifos)
AC_SUBST(MODPATH_rtai_shm)
AC_SUBST(MODPATH_rtai_sem)
AC_SUBST(MODPATH_rtai_math)
AC_SUBST(MODPATH_adeos)
AC_SUBST(MODPATH_rtai)
AC_SUBST(MODPATH_rt_mem_mgr)
AC_SUBST(MODPATH_rtai_sched)
AC_SUBST(MODPATH_rtai_shm)
AC_SUBST(MODPATH_rtai_libm)
AC_SUBST(MODPATH_rtl)
AC_SUBST(MODPATH_mbuff)
AC_SUBST(MODPATH_rtl_time)
AC_SUBST(MODPATH_rtl_sched)
AC_SUBST(MODPATH_rtl_posixio)
AC_SUBST(MODPATH_rtl_fifo)
AC_SUBST(MODPATH_xeno_math)
fi

# Checks for header files.

##############################################################################
# Section 4.1 - Important headers, functions and gloabl defines.             #
#                                                                            #
##############################################################################

# This section gets inserted in to config.h.in when autoheader is run.
# Global and common defines should be here rather than duplicated in
# multiple places. Keep screwball constructs out of this, and it can
# be used in both kernel space and user space.
AH_TOP([/********************************************************************
* Description: config.h
*
*	Common defines used in many emc2 source files.
*       To add to this file, edit Section 4.1 in configure.in
*       and then run autoheader.
*
* Author: Autogenerated by autoheader
* License: LGPL Version 2
* System: Linux
*    
* Copyright (c) 2004 All rights reserved.
********************************************************************/
#ifndef EMC2_CONFIG_H
#define EMC2_CONFIG_H

/* LINELEN is used throughout for buffer sizes, length of file name strings,
   etc. Let's just have one instead of a multitude of defines all the same. */
#define LINELEN 255
/* Used in a number of places for sprintf() buffers. */
#define BUFFERLEN 80

#define MM_PER_INCH 25.4
#define INCH_PER_MM (1.0/25.4)
])

AH_VERBATIM([_GNU_SOURCE],
[/* Enable GNU extensions on systems that have them.  */
#ifndef _GNU_SOURCE
# define _GNU_SOURCE
#endif
])

AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_FUNCS(semtimedop)
LIBS_hold=$LIBS
LIBS="$LIBS -lm"

AC_MSG_CHECKING([for sincos function])
sincos_ok=yes
AC_LINK_IFELSE([AC_LANG_PROGRAM([[double a, b;]], [[sincos(1.0, &a, &b);]])],[AC_DEFINE(
        HAVE_SINCOS,
        1,
        Define to 1 if sincos is available.
    )],[sincos_ok=no
])
AC_MSG_RESULT([$sincos_ok])

AC_CHECK_FUNCS(__sincos)
LIBS=$LIBS_hold

AH_BOTTOM(#endif
)

##############################################################################
# Section 5 - Check for tcl/tk support                                       #
#                                                                            #
# Test for tcl/tk headers fails if they are not in /usr/include              #
# so testing is done by finding tclConfig.sh and tkConfig.sh                 #
# if the search fails the traditional check is done                          #
##############################################################################
AC_MSG_CHECKING([for tcl])

AC_ARG_WITH(tclConfig,
    [  --with-tclConfig=<path>                 Specify the path to tclConfig],
    [
        TCLCONFIG=$withval
    ],[
        TCLCONFIG=
    ])

# if not specified, search for tclConfig.sh
if (test "x$TCLCONFIG" = "x"); then
    TCLCONFIG=$(find /usr/lib* -maxdepth 2 -name tclConfig.sh | head -n1)
    if (test "x$TCLCONFIG" = "x"); then
	TCLCONFIG=$(find /usr/local/lib* -maxdepth 2 -name tclConfig.sh | head -n1)
    fi
fi

if (test "x$TCLCONFIG" = "x"); then
   AC_MSG_RESULT([tclConfig.sh not found, trying tcl.h and libs.
		  If it doesn't work try running ./configure --with-tclConfig=<path to tclConfig.sh>])
   AC_CHECK_HEADERS([tcl.h])
   AC_SEARCH_LIBS(Tcl_Init,[tcl tcl8.1 tcl8.2 tcl8.3 tcl8.4 tcl8.5],[],[AC_MSG_ERROR([tcl lib not found])])
else
# tclConfig.sh found,
# extracting vars
   AC_MSG_RESULT([$TCLCONFIG found])
   . "$TCLCONFIG"
   TCL_CFLAGS="$TCL_INCLUDE_SPEC -DUSE_TCL_STUBS"
   TCL_LIBS="$TCL_STUB_LIB_SPEC"
fi

AC_MSG_CHECKING([for tk])

AC_ARG_WITH(tkConfig,
    [  --with-tkConfig=<path>                  Specify the path to tkConfig],
    [
        TKCONFIG=$withval
    ],[
        TKCONFIG=
    ])

# if not specified, search for tclConfig.sh
if test -z "$TKCONFIG"; then
    TKCONFIG=$(dirname $TCLCONFIG)/tkConfig.sh
    if ! test -f $TKCONFIG; then unset TKCONFIG; fi
fi
if (test "x$TKCONFIG" = "x"); then
    # search for tkConfig.sh
    TKCONFIG=$(find /usr/lib -maxdepth 2 -name tkConfig.sh | head -n1)
    if (test "x$TKCONFIG" = "x"); then
	TKCONFIG=$(find /usr/local/lib -maxdepth 2 -name tkConfig.sh | head -n1)
    fi
fi

if (test "x$TKCONFIG" = "x"); then
   AC_MSG_RESULT([tkConfig.sh not found, trying tk.h and libs.
		  If it doesn't work try running ./configure --with-tkConfig=<path to tkConfig.sh>])
   AC_CHECK_HEADERS([tk.h])
   AC_SEARCH_LIBS(Tk_Init,[tk tk80 tk8.0 tk8.1 tk8.2 tk8.3 tk8.4 tk8.5],[],[AC_MSG_ERROR([tk lib not found])])
else
# tkConfig.sh found,
# extracting vars
   AC_MSG_RESULT([$TKCONFIG found])
   . "$TKCONFIG"
   TK_CFLAGS="$TK_INCLUDE_SPEC $TK_XINCLUDES" 
   TK_LIBS="$TK_LIBS $TK_LIB_SPEC"
fi

if ! test -z "$TCL_VERSION" && ! test -z "$TK_VERSION" && ! test "$TCL_VERSION" = "$TK_VERSION" ; then
    AC_MSG_ERROR([Tcl and Tk versions must be the same, but configure found
Tcl $TCL_VERSION and Tk $TK_VERSION.  You can use --with-tkConfig= and --with-tclConfig=
to override the autodetected versions.])
fi

if test -f $TCL_EXEC_PREFIX/bin/wish$TCL_VERSION; then
    WISH=$TCL_EXEC_PREFIX/bin/wish$TCL_VERSION
elif test -f $TCL_EXEC_PREFIX/bin/wish; then
    WISH=$TCL_EXEC_PREFIX/bin/wish
else
    WISH=wish
fi

if test -f $TCL_EXEC_PREFIX/bin/tclsh$TCL_VERSION; then
    TCLSH=$TCL_EXEC_PREFIX/bin/tclsh$TCL_VERSION
elif test -f $TCL_EXEC_PREFIX/bin/tclsh; then
    TCLSH=$TCL_EXEC_PREFIX/bin/tclsh
else
    TCLSH=tclsh
fi

AC_MSG_CHECKING([for BWidget using $TCLSH])
if (unset DISPLAY; echo ["catch { package require bwidget }; exit [expr [lsearch [package names] BWidget] == -1]"] | $TCLSH); then
    AC_MSG_RESULT([found])
else
    AC_MSG_ERROR([not found])
fi

HAVE_WORKING_BLT=no
AC_MSG_CHECKING([for BLT using tclsh8.5])
if (test -f $TCL_EXEC_PREFIX/bin/tclsh8.5) && (echo ['if [catch {package require BLT}] { exit 1; } else { exit 0; }'] | tclsh8.5); then
    AC_MSG_RESULT([found])
    HAVE_WORKING_BLT=yes
else
    AC_MSG_RESULT([not found])
fi

AC_SUBST([TCL_DBGX])
AC_SUBST([TK_DBGX])
AC_SUBST([TCL_CFLAGS])
AC_SUBST([TK_CFLAGS])
AC_SUBST([TCL_LIBS])
AC_SUBST([TK_LIBS])
AC_SUBST([WISH])
AC_SUBST([TCLSH])
AC_SUBST([HAVE_WORKING_BLT])

##############################################################################
# Section 6 - Miscelaneous support                                           #
#                                                                            #
# Subsection 6.1. - provides DATE to output it to the generated files        #
# Subsection 6.2. - user option to convince make to be quiet during make     #
##############################################################################

# provides DATE in order to output it to the generated files
DATE=$(date)
AC_SUBST([DATE])
AC_PATH_XTRA
#X_CFLAGS gets set
#X_LIBS and X_EXTRA_LIBS likewise

AC_SUBST([X_LIBS])
AC_SUBST([X_CFLAGS])

AC_CHECK_HEADERS(X11/extensions/Xinerama.h,
	    [HAVE_XINERAMA=yes],
	    [HAVE_XINERAMA=no])

AC_CHECK_LIB(Xinerama, XineramaQueryExtension,
	    [],
	    [HAVE_XINERAMA=no])

if test "x$HAVE_XINERAMA" = "xno"; then
    AC_MSG_ERROR([Xinerama library or headers not found])
fi

# check for Xaw, that is needed for emc2/src/emc/usr_intf/xemc.cc

if test "$have_x" = "yes"; then
CFLAGS_hold=$CFLAGS
LIBS_hold=$LIBS
CFLAGS="$CFLAGS $X_CFLAGS"
LIBS="$LIBS $X_PRE_LIBS $X_LIBS"

AC_CHECK_HEADERS(X11/Xaw/XawInit.h,
	    [HAVE_XAW=yes],
	    [HAVE_XAW=no],
	    [[#include <X11/Intrinsic.h>
	    ]])

AC_CHECK_LIB(Xaw, XawDialogGetValueString,
	    [],
	    [HAVE_XAW=no])
CFLAGS=$CFLAGS_hold
LIBS=$LIBS_hold
fi

if test "x$HAVE_XAW" = "xno"; then
    AC_MSG_WARN([Xaw lib missing, you won't be able to build/run xemc. try installing it with 'apt-get install libxaw7-dev'])
else    
    XAW_LIBS="$X_PRE_LIBS $X_LIBS -lX11 -lXaw -lXt"
fi
AC_SUBST([HAVE_XAW])
AC_SUBST([XAW_LIBS])

#clean out LIBS, or else all future tests will check with -lXaw (which fails on odd systems)
temp_LIBS=$LIBS
LIBS=

# check for readline.h and friends, optional for halcmd
AC_CHECK_HEADERS(readline/readline.h, [HAVE_READLINE=yes], [HAVE_READLINE=no])
AC_CHECK_HEADERS(readline/history.h, [], [HAVE_READLINE=no])

echo "Trying readline without -ltermcap"
AC_CHECK_LIB(readline, readline, [HAVE_READLINE_NOTERMCAP=yes], [])
unset ac_cv_lib_readline_readline
echo "Trying readline with -ltermcap"
AC_CHECK_LIB(readline, readline, [HAVE_READLINE_TERMCAP=yes], [], -ltermcap)
unset ac_cv_lib_readline_readline

if test "x$HAVE_READLINE_NOTERMCAP" = "xyes"; then
    echo "Readline does not require -ltermcap"
    READLINE_LIBS="-lreadline"
elif test "x$HAVE_READLINE_TERMCAP" = "xyes"; then
    echo "Readline requires -ltermcap"
    READLINE_LIBS="-lreadline -ltermcap"
else
    HAVE_READLINE=no
fi

if test "x$HAVE_READLINE" = "xyes"; then
    AC_DEFINE([HAVE_READLINE], [], [Define to 1 if you have the 'readline' library (-lreadline) and required headers])
else
    AC_MSG_ERROR([Required library 'readline' missing.])
fi
AC_SUBST([HAVE_READLINE])
AC_SUBST([READLINE_LIBS])


#check for ncurses.h needed for emc2/src/emc/usr_intf/keystick.cc

AC_CHECK_HEADERS(ncurses.h,
	    [HAVE_NCURSES=yes],
	    [HAVE_NCURSES=no])

AC_CHECK_LIB(ncurses, initscr,
	    [],
	    [HAVE_NCURSES=no])

if test "x$HAVE_NCURSES" = "xno"; then
    AC_MSG_WARN(ncurses lib missing, you won't be able to build/run keystick. try installing it with 'apt-get install libncurses-dev')
else    
    NCURSES_LIBS="-lncurses"
fi
AC_SUBST([HAVE_NCURSES])
AC_SUBST([NCURSES_LIBS])


##############################################################################
# Section 7 - Language support                                               #
#                                                                            #
# i18n Language support:                                                     #
# see http://cvs.gnome.org/viewcvs/intltool/doc/I18N-HOWTO?rev=1.3           #
##############################################################################

# if you don't have nls tools, allow a way out!

AC_ARG_ENABLE(nls,
              [  --disable-nls           don't use NLS],
              USE_NLS=no, USE_NLS=yes)
AC_SUBST(USE_NLS)

if test "$USE_NLS" = "yes"; then
  AC_CHECK_HEADERS(locale.h)
  AC_CHECK_FUNCS(setlocale)
  AC_SUBST(HAVE_LOCALE_H)  

# Add languages here when they are translated.
# Grep the LINGUAS file.
  LANGUAGES=""
  AC_SUBST(LANGUAGES)  
  AC_CHECK_HEADERS(libintl.h)
  AC_CHECK_LIB(intl,gettext)
  AC_SUBST(HAVE_LIBINTL_H)  
  AC_SUBST(HAVE_LIBINTL)

# The default locale directory is /usr/share/locale - This is generally fixed
# by the distribution....
  dnl Handle localedir
  LOCALEDIR='/usr/share/locale'
  AC_ARG_WITH(locale-dir,
  [  --with-locale-dir=DIR   Location of the locale file(s)
                          [DATADIR/locale]],[
    if test x$withval = xyes; then
      AC_MSG_WARN(Usage is: --with-locale-dir=basedir)
    else
      if test x$withval = xno; then
        AC_MSG_WARN(Usage is: --with-locale-dir=basedir)
      else
        LOCALEDIR=$withval
      fi
    fi
  ])
  AC_SUBST(LOCALEDIR)
fi

#restore LIBS
LIBS="$X_LIBS $temp_LIBS"

AC_PATH_PROG(XGETTEXT,xgettext,none)
XGETTEXT_TCL_WORKS=no
if test "$XGETTEXT" = "none"; then
   AC_MSG_ERROR(install gettext 0.14.5 or above)
else
   AC_MSG_CHECKING(for xgettext tcl bug)
   set -- $(xgettext --version | head -1)
   version=$4
   set -- $(echo $4 | tr . " ")
   if test ${1-0} -gt 0 -o \( ${1-0} -eq 0 -a \( ${2-0} -gt 14 -o \( ${2-0} -eq 14 -a ${3-0} -ge 5 \) \) \)
   then
	XGETTEXT_TCL_WORKS=yes
	AC_MSG_RESULT(xgettext version $version OK)
    else
	AC_MSG_RESULT(xgettext version $version buggy -- need at least 0.14.5)
        AC_MSG_ERROR(install xgettext 0.14.5 or above)
   fi
fi
AC_SUBST(XGETTEXT)

AC_PATH_PROG(MSGFMT,msgfmt,none)
if test "$MSGFMT" = "none"; then
   AC_MSG_ERROR(install gettext 0.14.5 or above)
else
    AC_MSG_CHECKING(for --tcl support in msgfmt)
    if $MSGFMT --tcl -l de -d /tmp /dev/null > /dev/null 2>&1; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_ERROR(install xgettext 0.14.5 or above)
    fi
fi
AC_SUBST(MSGFMT)

AC_MSG_CHECKING(for Python support)
AC_ARG_ENABLE(python,
    [  --disable-python        Disable the parts of emc2 that depend on Python],
    [
	case "$enableval" in
	Y*|y*)
	    BUILD_PYTHON=yes ;;
	*)
	    BUILD_PYTHON=no ;;
	esac
    ],
    [BUILD_PYTHON=yes])

AC_MSG_RESULT($BUILD_PYTHON)

if test "$BUILD_PYTHON" = "yes"; then
    if test "$PYTHON" = "none"; then
	AC_MSG_ERROR([Python missing.  Install it or specify --disable-python to skip the parts of emc2 that depend on Python])
    fi

    AC_MSG_CHECKING([python version])
    if ! $PYTHON -c 'import sys;raise SystemExit,sys.hexversion<0x2040000'
    then
	AC_MSG_ERROR(Python version too old (2.4 or newer required))
    fi
    AC_MSG_RESULT(OK)

    AC_MSG_CHECKING([match between tk and Tkinter versions])
	
    PYTHON_TK_VERSION="`$PYTHON -c 'import _tkinter; print _tkinter.TK_VERSION'`"
    PYTHON_TCL_VERSION="`$PYTHON -c 'import _tkinter; print _tkinter.TCL_VERSION'`"

    if test "$PYTHON_TCL_VERSION" != "$TCL_VERSION"; then
	AC_MSG_RESULT([TCL mismatch: $TCL_VERSION vs $PYTHON_TCL_VERSION])
	AC_MSG_ERROR([Python requires use of Tcl $PYTHON_TCL_VERSION and Tk $PYTHON_TK_VERSION.
Install this version and specify --with-tclConfig and --with-tkConfig if necessary])
    fi
    if test "$PYTHON_TK_VERSION" != "$TK_VERSION"; then
	AC_MSG_RESULT([Tk mismatch: $TK_VERSION vs $PYTHON_TK_VERSION])
	AC_MSG_ERROR(["Python requires use of Tk $TK_VERSION.  Install this version and specify --with-tkConfig if necessary"])
    fi
    AC_MSG_RESULT([$PYTHON_TK_VERSION])

    AC_MSG_CHECKING(location of Python header files)
    INCLUDEPY=`$PYTHON -c 'import distutils.sysconfig; print distutils.sysconfig.get_config_vars().get("INCLUDEPY")'`
    AC_MSG_RESULT($INCLUDEPY)

    AC_CHECK_HEADER($INCLUDEPY/Python.h,[],
	[AC_MSG_ERROR([Required header Python.h missing.  Install it, or specify --disable-python to skip the parts of emc2 that depend on Python])])

    AC_MSG_CHECKING(for site-package location)
    SITEPY=`$PYTHON -c 'import distutils.sysconfig; print distutils.sysconfig.get_python_lib()'`
    AC_MSG_RESULT($SITEPY)

    AC_CHECK_HEADERS(GL/gl.h GL/glu.h,[],[AC_MSG_ERROR([Required OpenGL header missing.  Install it, or specify --disable-python to skip the parts of emc2 that depend on Python])])

    AC_CHECK_LIB(GL, glBegin, [], [AC_MSG_ERROR([Required GL library missing.  Install it, or specify --disable-python to skip the parts of emc2 that depend on Python])])

    AC_MSG_CHECKING(for working GLU quadrics)
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include <GL/gl.h>
#include <GL/glu.h>
]], [[GLUquadric *q;]])],[AC_MSG_RESULT(yes)],[
		AC_MSG_ERROR([Required GLU library missing.  Install it or specify --disable-python to skip the parts of emc2 that depend on Python])
	
    ])

    AC_MSG_CHECKING(for Xmu headers)
    AC_CHECK_HEADERS(X11/Xmu/Xmu.h,[],[AC_MSG_ERROR([Required Xmu header missing.  Install it, or specify --disable-python to skip the parts of emc2 that depend on Python])])
fi

AC_SUBST([BUILD_PYTHON])
AC_SUBST([INCLUDEPY])
AC_SUBST([SITEPY])


##############################################################################
# files that get created by ./configure                                      #
##############################################################################
#AC_CONFIG_FILES([../configs/rtapi.conf ../configs/emc.conf ../configs/hal.conf config.h])
AC_CONFIG_FILES([../scripts/rtapi.conf])
AC_CONFIG_FILES([../docs/man/man1/linuxcnc.1])
AC_CONFIG_FILES([../scripts/linuxcnc], [chmod +x ../scripts/linuxcnc])
AC_CONFIG_FILES([../scripts/halrun], [chmod +x ../scripts/halrun])
AC_CONFIG_FILES([../scripts/rip-environment], [chmod +x ../scripts/rip-environment])
AC_CONFIG_FILES([../scripts/haltcl], [chmod +x ../scripts/haltcl])
AC_CONFIG_FILES([../scripts/realtime], [chmod +x ../scripts/realtime])
AC_CONFIG_FILES([../scripts/latencyplot], [chmod +x ../scripts/latencyplot])
AC_CONFIG_FILES([../scripts/latencyhistogram], [chmod +x ../scripts/latencyhistogram])
AC_CONFIG_FILES(Makefile.inc)
AC_CONFIG_FILES(Makefile.modinc)
AC_CONFIG_FILES(../tcl/linuxcnc.tcl)
AC_CONFIG_FILES(../lib/python/nf.py)
AC_CONFIG_FILES([../scripts/linuxcncmkdesktop], [chmod +x ../scripts/linuxcncmkdesktop])
AC_CONFIG_FILES(../share/applications/linuxcnc-latency.desktop)
AC_CONFIG_FILES(../share/applications/linuxcnc-latencyplot.desktop)
AC_CONFIG_FILES(../share/applications/linuxcnc.desktop)
AC_CONFIG_FILES(../share/desktop-directories/cnc.directory)
AC_CONFIG_FILES(../share/menus/CNC.menu)
AC_CONFIG_FILES(linuxcncconfig.py-tmp)
AC_OUTPUT

# clean up linuxcncconfig.py:
# subsitute "yes" by True
# subsitute "no" by False
AC_MSG_RESULT(touching up ../lib/python/linuxcncconfig.py)
sed -e 's/"yes"/True/g' -e 's/"no"/False/g' \
    <linuxcncconfig.py-tmp \
    >../lib/python/linuxcncconfig.py
AC_MSG_CHECKING(usability of ../lib/python/linuxcncconfig.py)
python ../lib/python/linuxcncconfig.py
AC_MSG_RESULT(done)

##############################################################################
# message to the user what to do next, after a succesfull ./configure        #
##############################################################################
bold () {
    if tty > /dev/null 2>&1 && type -path tput > /dev/null 2>&1;
    then
        tput smso
    fi
}

offbold () {
    if tty > /dev/null 2>&1 && type -path tput > /dev/null 2>&1;
    then
        tput rmso
    fi
}

echo ""
echo ""
echo "######################################################################"
echo "#                LinuxCNC - Enhanced Machine Controller              #"
echo "######################################################################"
echo "#                                                                    #"
echo "#   LinuxCNC is a software system for computer control of machine    #"
echo "#   tools such as milling machines. LinuxCNC is released under the   #"
echo "#   GPL.  Check out http://www.linuxcnc.org/ for more details.       #"
echo "#                                                                    #"
echo "#                                                                    #"
echo "#   It seems that ./configure completed successfully.                #"
if test $SIMULATOR = yes; then
echo "#   However, the configuration is for a simulator only, no RT        #"
echo "#   capabilities will be used. In this mode no control of hardware   #"
echo "#   is possible. Drivers won't be built.                             #"
else
echo "#   This means that RT is properly installed                         #"
fi
echo "#   If things don't work check config.log for errors & warnings      #"
echo "#                                                                    #"

if test "xyes" = "x$RUN_IN_PLACE"; then
echo "#   Next compile by typing                                           #"
echo "#         make                                                       #"
if test $THREADS != posix -o \( $BUILD_DRIVERS = yes \) ; then
echo "#         sudo make setuid                                           #"
fi
echo "#                                                                    #"
echo "#   Before running the software, set the environment:                #"
echo "#         . (top dir)/scripts/rip-environment                        #"
else
bold
echo "#   warning: If you already have an installed linuxcnc, this will    #"
echo "#         replace an existing installation.  If you have installed   #"
echo "#         a linuxcnc package, this will damage the package.          #"
offbold
echo "#   hint: To test a self-built version of emc without damaging       #"
echo "#         the package version, don't specify a --prefix              #"
echo "#                                                                    #"
echo "#   Next compile by typing                                           #"
echo "#         make                                                       #"
echo "#   then install it by typing                                        #"
echo "#         sudo make install                                          #"
fi
echo "#                                                                    #"
echo "#   To run the software type                                         #"
echo "#         linuxcnc                                                   #"
echo "#                                                                    #"
echo "######################################################################"
echo ""
echo ""
