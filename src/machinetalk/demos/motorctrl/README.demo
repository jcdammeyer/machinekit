Simple demo for a remote component with gladevcp, served by haltalk and webtalk
-------------------------------------------------------------------------------


to run the demo:
================

This demo is set up to work via remote connections and therefore uses
its own machinekit.ini file with REMOTE=1 .

You can run both gladevcp and QtQuickVCP remotely; for the Android QtQuickVCP version,
you will need WiFi access to the network machinekit is running on.

- watch the log in a separate window:
  tail -f /var/log/linuxcnc.log

- execute ./rundemo

This will start halscope, and a gladevcp application (locally).

At this point, connecting remotely via QtQuickVCP or gladevcp should be possible:

You can download and install the Motorctrl demo for Android here, just download and install on your phone/tablet: http://static.mah.priv.at/public/QtApp-debug.apk

On a remote machinekit installation, review and run the rungladevcp script - the MKUUID variables
need to match up locally and remotely.

You can run several such UI's in parallel; values will be synched.

To edit .ui files for gladevcp you need the glade editor installed.
Beware - this is the old glade version (I think version must be < 3.0.8)


to see the websockets/JSON proxy in action:
===========================================

- connect from a web browser to http://<ip address>:8080/websocket.html

  this should show 'Log subscriber test - CONNECTED'

  now execute a HAL cmd which creates a log message, like 'halcmd loadrt or2'

  the log message should show up in the browser window.

To get an idea how the Javascript side of things look, review
the files in machinetalk/demos/webtalk-wwwroot/

In case you have a web browser which understands zeroconf announcements like Safari, your browser should find
the machinekit http service automatically - in Safari you'll find it under the 'Bonjour' dropdown as 'Machinekit on <ip address>'.


- to do a similar websocket connection from a python script, run

  python websockets-client.py "ws://<ip address>:8080/?connect=machinekit://log&type=sub&subscribe=log&policy=json"


You might have to install the websocket-client from pypi for this to work (https://pypi.python.org/pypi/websocket-client/), e.g.
   sudo easy_install websocket-client

-  again, execute a halcmd statement which creates a log message, like 'halcmd loadrt or2'
  the JSON format machinetalk message should appear in the script output like so:

### opened ###
rx: {"tv_sec": 1402170188, "type": 10, "tv_nsec": 679251484, "log_message": {"origin": 2, "tag": "rtapi_app", "pid": 1318, "text": "or2: already loaded", "level": 1}}

This object is the result of automatic translation from/to protobuf messages via src/machinetalk/lib/json2pb.cc, which the webtalk server uses. This works in both directions, and for all
service types - making it perfectly possible to talk to RT components via JSON.
