component micromot  "example  RT command processing component";

pin out u32 received   "number of successful read attempts";
function _;

option singleton yes;
option rtapi_app no;

license "GPLv2 or later";
;;

#include "hal_priv.h"
#include "hal_ring.h"
#include "../protobuf/demo.npb.h"
#include "../protobuf/demo.npb.c"

static char *name = "micromot";

static char *command = "command";
RTAPI_MP_STRING(command,  "name of command ring to attach");
static char *response = "response";
RTAPI_MP_STRING(response,  "name of response ring to attach");

static ringbuffer_t  command_rb;  // incoming ringbuffer
static msgbuffer_t  command_mrb;  // multiframe layer on incoming ringbuffer
static ringbuffer_t response_rb;  // outgoing ringbuffer
static msgbuffer_t response_mrb;  // multiframe layer on outgoing ringbuffer

FUNCTION(_) {
    int n,i;
    ringvec_t rv[10] = { 0 };
    for (n = 0;
	 (n < 10) && (frame_readv(&command_mrb, &rv[n]) == 0);
	 n++, frame_shift(&command_mrb)) {
	ringvec_t *v = &rv[n];
	rtapi_print_msg(RTAPI_MSG_ERR,
			"Data[%d]: %zd '%.*s' flag=%d\n",
			n, v->rv_len, (int) v->rv_len,
			(const char *) v->rv_base,
			v->rv_flags);
    }
    // just echo
    if (n) {
	rtapi_print_msg(RTAPI_MSG_ERR,"echo %d\n",n);

	for (i = 0; i < n; i++) {
	    frame_writev(&response_mrb, &rv[i]);
	}
	msg_write_flush(&response_mrb);
    }
    msg_read_flush(&command_mrb);
}

int rtapi_app_main(void)
{
    int retval;

    if ((comp_id = hal_init("micromot")) < 0) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_init() failed: %d\n",
			name, comp_id);
	return -1;
    }
    if ((retval = hal_ring_attach(command, &command_rb, NULL))) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_ring_attach(%s) failed: %d\n",
			name, command, retval);
	goto error;
    }
    if ((retval = hal_ring_attach(response, &response_rb, NULL))) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_ring_attach(%s) failed: %d\n",
			name, response, retval);
	goto error;
    }

    command_rb.header->reader = comp_id;
    response_rb.header->writer = comp_id;

    msgbuffer_init(&command_mrb, &command_rb);
    msgbuffer_init(&response_mrb, &response_rb);

    if ((retval = export(name, 0))) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: export(ringread) failed: %d\n",
			name, retval);

	return -1;
    }
    hal_ready(comp_id);
    return 0;
 error:
    hal_exit(comp_id);
    return retval;
}

void rtapi_app_exit(void)
{
    int retval;

    command_rb.header->reader = 0;
    response_rb.header->writer = 0;

    if ((retval = hal_ring_detach(command, &command_rb)) < 0)
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_ring_detach(%s) failed: %d\n",
			name, command, retval);
    if ((retval = hal_ring_detach(response, &response_rb)) < 0)
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_ring_detach(%s) failed: %d\n",
			name, response, retval);
    hal_exit(comp_id);
}
